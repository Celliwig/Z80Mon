;
; MBOOT.ASM ver 3.1
; (revised 8 Jun 82 by Bill Bolton)
;
; MODEM BOOT PROGRAM by Keith Petersen, W8SDZ.
; Thanks to John Taylor for idea of incorporating
; simple terminal routine.  Based on MODEM.ASM V2.0,
; by Ward Christensen with enhancements from MODEM527.
;
; CP/M - CP/M file transfer program (receive-only)
;
; This program is intended for use as a way to
; initially transfer MODEM.COM or MODEM.ASM to
; a new user.  It may be used with almost any
; modem (see equates).
;
; A simple terminal routine at start of program allows
; user to communicate with a remote system prior to
; receiving a file to make it possible to down-load
; a file without intervention on the part of the host
; system's operator.
;
; COMMANDS:  MBOOT FILENAME.FILETYPE
;  or  MBOOT A:FILENAME.FILETYPE
;  or  MBOOT B:FILENAME.FILETYPE
;
; The program will operate as a dumb terminal until
; an 'ESC' key is typed (ctrl-[).  It then branches
; to the receive routine.  The user may also exit
; to CP/M without opening the receive file by typing
; ctrl-E from the terminal.  The values for the escape
; and exit keys may be changed in accordance with the
; needs of the user - some keyboards do not have the
; 'ESC' key and/or provision for control characters.
; See equates.
;
; NOTE: Comments for the source code and tabs have been
; removed to make this file easier to transport from one
; system to another. It may look strange but will assemble
; OK (KBP)

FALSE:			equ		0
TRUE:			equ		1

STDCPM:			equ		TRUE			; TRUE, IS STANDARD CP/M
ALTCPM:			equ		FALSE			; TRUE, IS ALTERNATE CP/M FOR H8 OR TRS80

if STDCPM == TRUE
BASE:			equ		0x0000
endif

if ALTCPM == TRUE
BASE:			equ		0x4200
endif

CPU_CLK:		equ	4				; CPU speed in Mhz (to nearest Mhz)

; Status register bits
uPD71051_reg_status_TxRdy:	equ		0		; Transmit Data Buffer: 1 = Empty, 0 = Full
uPD71051_reg_status_RxRdy:	equ		1		; Receive Data Buffer: 1 = Full, 0 = Not Ready

; CHANGE THESE EQUATES FOR YOUR MODEM PORT REQUIREMENTS
INITREQ:		equ	FALSE				; TRUE, IF MODEM PORT INITIALISATION REQUIRED
uart_status:		equ	nc100_uart_control_register	; PUT YOUR  UART STATUS PORT HERE
uart_tx_bit:		equ	1<<uPD71051_reg_status_TxRdy	; YOUR BIT TO TEST FOR SEND
uart_tx_ready:		equ	uart_tx_bit			; YOUR VALUE WHEN READY
uart_rx_bit:		equ	1<<uPD71051_reg_status_RxRdy	; YOUR BIT TO TEST FOR RECEIVE
uart_rx_ready:		equ	uart_rx_bit			; YOUR VALUE WHEN READY
uart_data:		equ	nc100_uart_data_register	; YOUR MODEM DATA PORT

ERRLIM:			EQU		10

character_code_soh:	equ	0x01				; Start Of Header
character_code_eot:	equ	0x04				; End Of Transmission
character_code_ack:	equ	0x06				; Acknowledge 
character_code_nak:	equ	0x15				; Negative Acknowledge
character_code_can:	equ	0x18				; Cancel
LF:			equ	0x0a				; Line Feed
CR:			equ	0x0d				; Carriage Return
character_code_enq:	equ	0x05				; Enquiry: CTL-E TO EXIT TERM MODE TO CP/M
character_code_esc:	equ	0x1B				; Escape: ESCAPE TO EXIT TERM MODE TO FILE RCVE

BDOS:			equ	BASE+0x0005			; Address of BDOS call
FCB:			equ	BASE+0x005C

org	BASE+100H
;**************************************************************
mboot_start:
	ld	(stack_old_ptr), sp				; Store current stack pointer
	ld	sp, stack_mboot_ptr				; Set mboot stack pointer
	call	bios_calls_init					; Patch BIOS calls
	call	inline_print
	db	"MBOOT 3.1 as of "
	db	"08/Jun/82",CR,LF,0
	ld	a, FCB+1					; Check if filename argmunet given
	cp	' '
	jp	nz, terminal_init
	call	inline_print					; No filename, so print
	db	"++NO FILE NAME SPECIFIED++",CR,LF,0		; Message
	jp	exit						; And exit

;**************************************************************
;  Basic terminal interface
terminal_init:
	call	uart_init					; Init UART
	in	a, (uart_data)					; Drain excess charactes
	in	a, (uart_data)
	call	inline_print					; Print message
	db	CR,LF,"TERMINAL MODE",CR,LF
	db	"CTL-E exits to CP/M, ESC starts file transfer"
	db	CR,LF,0
terminal_loop:
	call	bios_const					; Check console status
	jp	z, terminal_loop_UART_receive			; If nothing pending, check UART receive buffer
	call	bios_conin					; Console in (Blocking)
	cp	character_code_enq				; Check key (MBoot exit)
	jp	z, exit						; exit MBoot
	cp	character_code_esc				; Check key (File transfer)
	jp	z, receive_file
	out	(uart_data), a					; Character out
terminal_loop_UART_receive:
	in	a, (uart_status)				; Get UART status
	and	uart_rx_bit					; Check receive buffer status
	cp	uart_rx_ready
	jp	nz, terminal_loop				; If nothing pending, loop
	in	a, (uart_data)					; Get character from UART buffer
	and	0x7F						; Strip parity bit
	call	bios_conout					; Character out
	jp	terminal_loop					; Loop

;**************************************************************
;  Receive a file
receive_file:
	call	file_erase					; Erase file if it exits
	call	file_create					; Create a new file
	call	inline_print					; Print message
	db	"FILE OPEN, READY TO RECEIVE",CR,LF,0

receive_file_loop:
;	CALL	RCVSECT
;	JP	C, RCVEOT
;	CALL	file_write_sector
;	CALL	INCRSNO
;	CALL	send_acknowledge
	jp	receive_file_loop

RCVEOT:
;	CALL	file_write_sector_block
;	CALL	send_acknowledge
;	CALL	file_close
;	CALL	exit_on_error
;	DB	CR,LF,'TRANSFER COMPLETE$' 

RCVSECT:
;	XOR	A
;	LD	(error_count),A

RCVRPT:
;	LD	B, CPU_CLK*10
;	CALL	receive_byte
;	JP	C, RCVSERR
;	CP	character_code_soh
;	JP	Z, receive_xmodem_soh
;	OR	A
;	JP	Z, RCVRPT
;	CP	character_code_eot
;	SCF
;	RZ

RCVSERR:
;	LD	B, CPU_CLK
;	CALL	receive_byte
;	JP	NC, RCVSERR
;	LD	A, character_code_nak
;	CALL	SEND
;	LD	A, (error_count)
;	INC	A
;	LD	(error_count), A
;	CP	ERRLIM
;	JP	C, RCVRPT

RCVSABT:
;	CALL	file_close
;	CALL	exit_on_error
;	DB	'++UNABLE TO RECEIVE BLOCK'
;	DB	CR,LF,'++ABORTING++$'

receive_xmodem_soh:
	ld	b, CPU_CLK					; Timeout 1s
	call	receive_byte					; Get byte (Packet number)
	jp	c, RCVSERR					; Handle error
	ld	d, a						; Save packet number
	ld	b, CPU_CLK					; Timeout 1s
	call	receive_byte					; Get byte (Alt packet number)
	jp	c, RCVSERR					; Handle error
	cpl							; Complement alternate packet number
	cp	d						; Compare with saved value
	jp	z, receive_xmodem_data				; If there are no errors, get xmodem packet data
	jp	RCVSERR
receive_xmodem_data:
	ld	a, d						; Get packet number
	ld	(xmodem_packet_number), A			; Save Xmodem packet number
	ld	c, 0x00						; Reset checksum value
	ld	hl, BASE+0x80					; Set serial buffer pointer
receive_xmodem_data_loop:
	ld	b, CPU_CLK					; Timeout 1s
	call	receive_byte					; Get byte (data)
	jp	c, RCVSERR					; Handle error
	ld	(hl), a						; Save byte in buffer
	inc	l						; Increment buffer pointer
	jp	nz, receive_xmodem_data_loop			; Keep getting bytes until pointer overflows
	ld	d, c						; Save checksum
	ld	b, CPU_CLK					; Timeout 1s
	call	receive_byte					; Get byte (Checksum)
	jp	c, RCVSERR					; Handle error
	cp	d						; Compare calculated checksum, with the transmited value
	jp	nz, RCVSERR					; Handle error
	ld	a, (xmodem_packet_number)			; Get sent packet number
	ld	b, a						; Save sent packet number
	ld	a, (xmodem_local_number)			; Get local packet number
	cp	b						; Compare packet numbers
	jp	z, receive_xmodem_packet_ack			; No errors, so acknowledge
	inc	a						; Check for mismatched (by 1) packet numbers
	cp	b						; Compare packet numbers
	jp	nz, ABORT					; If the packet number numbers don't match, abort
	ret
receive_xmodem_packet_ack:
	call	send_acknowledge
	jp	RCVSECT

send_acknowledge:
	ld	a, character_code_ack				; Acknowledge character
send:
	push	af						; Save byte to send
	add	a, c						; Save checksum
	ld	c, a
send_loop_UART_ready:
	in	a, (uart_status)				; Get UART status
	and	uart_tx_bit					; Check transmit buffer status
	cp	uart_tx_ready
	jp	nz, send_loop_UART_ready			; If Tx buffer unavailable, loop
	pop	af						; Restore byte to send
	out	(uart_data), a					; Write byte out
	ret

ABORT:
;	LD	SP, stack_mboot_ptr

ABORTL:
;	LD	B, CPU_CLK
;	CALL	receive_byte
;	JP	NC, ABORTL
;	LD	A, character_code_can
;	CALL	SEND

ABORTW:
;	LD	B, 1
;	CALL	receive_byte
;	JP	NC, ABORTW
;	LD	A, ' '
;	CALL	SEND
;	CALL	exit_on_error
;	DB	'MBOOT PROGRAM CANCELLED$'

INCRSNO:
;	LD	A, (xmodem_local_number)
;	INC	A
;	LD	(xmodem_local_number), A
;	RET

; file_erase
;**************************************************************
;  Erase file, if it exists
file_erase:
	ld	de, FCB
	ld	c, 17						; BDOS function #17: Search for first
	call	BDOS						; On error, returns A=255
	inc	a						; Check if an error occurred
	ret	z						; Return on error
	call	inline_print					; Print message
	db	"++FILE EXISTS, TYPE Y TO ERASE: ",0
	call	bios_conin					; Get response
	push	af						; Store response
	call	bios_conout					; Print response
	call	bios_conout_crlf				; Carriage return
	pop	af						; Restore response
	and	0x5F						; Convert lowercase to uppercase
	cp	'Y'
	JP	NZ,exit_with_message				; File exists, so just exit
	ld	de, FCB
	ld	c, 19						; BDOS function #19: Delete file
	jp	BDOS

; file_create
;**************************************************************
;  Create file
file_create:
	ld	de, FCB
	ld	c, 22						; BDOS function #22: Create file
	call	BDOS						; On error, returns A=255
	inc	a						; Check if an error occurred
	ret	nz						; No errors, so return
	call	exit_on_error					; An error occured, print error and exit
	db	"++ERROR - CAN''T MAKE FILE",CR,LF
	db	"++DIRECTORY MUST BE FULL$"

; file_close
;**************************************************************
;  Close file
file_close:
	ld	de, FCB
	ld	c, 16						; BDOS function #16: Close file
	call	BDOS						; On error, returns A=255
	inc	a						; Check if an error occurred
	ret	nz						; No errors, so return
	call	exit_on_error					; An error occured, print error and exit
	db	"++CAN''T CLOSE FILE$"

; file_write_sector
;**************************************************************
;  Write a sector to the file.
;  An actual disk write only occurs for every 16 sectors written.
file_write_sector:
	ld	de, (sector_buffer_pointer)			; Sector buffer pointer
	ld	hl, BASE+0x80					; Serial buffer pointer
	call	memcopy_128					; Copy 128 bytes from serial buffer to sector buffer
	ld	(sector_buffer_pointer), de			; Save sector buffer pointer
	ld	a, (sector_buffer_count)			; Get number of sectors stored in buffer
	inc	a						; Increment number of sectors stored in buffer
	ld	(sector_buffer_count), a			; Store number of sectors stored in buffer
	cp	16						; Are there 16 sectors stored?
	ret	nz						; <16 so return
; file_write_sector_block
;**************************************************************
;  Write a block of sectors to the file
file_write_sector_block:
	ld	a, (sector_buffer_count)			; Get number of sectors stored in buffer
	or	a						; Set flags
	ret	z						; If the number of sectors in the buffer is zero, return
	ld	c, a						; Set number of sectors to write
	ld	de, sector_buffer				; Set pointer to sector to write
file_write_sector_block_loop:
	push	hl						; Save registers
	push	de
	push	bc
	ld	c, 26						; BDOS function #26: Set DMA address
	call	BDOS
	ld	de, FCB
	ld	c, 21						; BDOS function #21: Write next record
	call	BDOS
	pop	bc						; Restore registers
	pop	de
	pop	hl
	or	a						; Set flags
	jp	nz, file_write_sector_error			; An error occured, so exit
	ld	hl, 0x0080					; Offset to next sector
	add	hl, de						; Calculate next sector
	ex	de, hl
	dec	c						; Decrement number of stored sectors
	jp	nz, file_write_sector_block_loop		; More sectors left, so loop
	xor	a						; Clear A
	ld	(sector_buffer_count), a			; Clear number of stored sectors
	ld	hl, sector_buffer
	ld	(sector_buffer_pointer), hl			; Reset sector buffer pointer
; file_write_sector_reset_DMA_addr
;**************************************************************
;  Call BDOS function: Set DMA Address
file_write_sector_reset_DMA_addr:
	ld	de, BASE+0x80
	ld	c, 26						; BDOS function #26: Set DMA address
	jp	BDOS

; file_write_sector_error
;**************************************************************
file_write_sector_error:
	call	file_write_sector_reset_DMA_addr		; Reset disk DMA address
	call	inline_print					; Print message
	db	"++ERROR WRITING FILE",CR,LF,0
	jp	ABORT

; receive_byte
;**************************************************************
;  Receive a byte of data, or timeout after a number of seconds
;	In:	B = Clock frequency in MHz (= 1s timeout)
;	Out:	A = Character in (If there is one)
;		Carry flag set on timeout, clear if character read
receive_byte:
	push	de						; Save register
receive_byte_loop_clock_adjust:
	ld	de, 12500					; Delay loop * Clock frequency (MHz) = 1 sec
receive_byte_loop:
	in	a, (uart_status)				; Get UART status
	and	uart_rx_bit					; Check if byte available in UART buffer
	cp	uart_rx_ready
	jp	z, receive_byte_get				; Get byte from UART
	dec	e						; Decrement delay loop
	jp	nz, receive_byte_loop				; Loop if not zero
	dec	d						; Decrement delay loop
	jp	nz, receive_byte_loop				; Loop if not zero
	dec	b						; Decrement CPU clock adjust
	jp	nz, receive_byte_loop_clock_adjust		; Loop if not zero
	pop	de
	scf							; Set Carry flag
	ret
receive_byte_get:
	in	a, (uart_data)					; Get byte from UART buffer
	pop	de						; Restore register
	push	af						; Save byte
	add	a, c						; Calculate checksum?
	ld	c, a
	pop	af						; Restore byte
	or	a						; Set flags
	ret

; bios_calls_init
;**************************************************************
;  BIOS routines need call addresses patching
bios_calls_init:
	ld	hl, (BASE+1)					; HL=BIOS WarmBoot routine
	ld	de, 0x0003					; BIOS jump table increment value
	add	hl, de						; HL=BIOS Console Status
	ld	(bios_const_cptr+1), hl				; Update bios_const routine
	add	hl, de						; HL=BIOS Console In
	ld	(bios_conin_cptr+1), hl				; Update bios_conin routine
	add	hl, de						; HL=BIOS Console Out
	ld	(bios_conout_cptr+1), hl			; Update bios_conout routine
	ret

; uart_init
;**************************************************************
;  UART initialisation code lives here
uart_init:
if INITREQ							; Insert any UART initialisation code here
endif
	ret							; <--THIS RET MUST BE HERE

; bios_conout_crlf
;**************************************************************
bios_conout_crlf:
	ld	a, CR
	call	bios_conout
	ld	a, LF
; bios_conout
;**************************************************************
;  Call BIOS console out routine
bios_conout:
	push	af						; Store registers
	push	bc
	push	de
	push	hl
	ld	c, a						; Move character into position
bios_conout_cptr:
	call	0x0000						; Address is patched by bios_calls_init
	pop	hl						; Restore registers
	pop	de
	pop	bc
	pop	af
	ret

; bios_const
;**************************************************************
;  Call BIOS console status routine
bios_const:
	push	bc						; Store registers
	push	de
	push	hl
bios_const_cptr:
	call	0x0000						; Address is patched by bios_calls_init
	pop	hl						; Restore registers
	pop	de
	pop	bc
	or	a						; Set flags
	ret

; bios_conin
;**************************************************************
;  Call BIOS console in routine
bios_conin:
	push	bc						; Store registers
	push	de
	push	hl
bios_conin_cptr:
	call	0x0000						; Address is patched by bios_calls_init
	pop	hl						; Restore registers
	pop	de
	pop	bc
	and	0x7f						; Filter parity bit
	ret

; inline_print
;**************************************************************
;  Prints the string which follows the call to this function.
;  Continues execution after the string.
inline_print:
	ex	(sp), hl					; Get pointer to string
inline_print_loop:
	ld	a, (hl)						; Get character
	or	a						; Check if zero
	jp	z, inline_print_finish				; If zero, finish
	call	bios_conout					; Print character
	inc	hl						; Increment string pointer
	jp	inline_print_loop				; Loop
inline_print_finish:
	ex	(sp), hl					; Push return address onto stack
	ret

; exit_on_error
;**************************************************************
;  Print error message (pointer on stack), and exit
exit_on_error:
	pop	de						; Get pointer to message (used 'call' so it's the return address)
	ld	c, 0x09						; BDOS function #9: Output string
	call	BDOS
; exit_with_message
;**************************************************************
;  Print modem message and exit
exit_with_message:
	call	inline_print					; Print modem message
	db	CR,LF,"Don't forget to disconnect modem."
	db	CR,LF,0
; exit
;**************************************************************
;  Reload old stack pointer and exit
exit:
	ld	sp, (stack_old_ptr)				; Restore old stack
	ret

; memcopy_128
;**************************************************************
;  Copy 128 bytes of memory from HL to DE
memcopy_128:
	ld	b, 0x80						; Copy 128 bytes of memory
; memcopy
;**************************************************************
;  Copy B bytes of memory from HL to DE
memcopy:
	ld	a, (hl)						; Copy byte from HL
	ld	(de), a						; Into DE
	inc	hl						; Increment pointers
	inc	de
	djnz	memcopy						; Loop until zero
	ret

xmodem_packet_number:	db		0x00			; Xmodem packet number sent by server
xmodem_local_number:	db		0x00			; Xmodem local number (local packet count)
error_count:		db		0x00			; Number of errors that have occured
EOFLG:			db		0x00
sector_buffer_pointer:	dw		sector_buffer		; Pointer to the current location in the sector buffer
sector_buffer_count:	db		0x00			; Number of sectors stored in sector buffer
stack_mboot:		ds		60, 0x00		; MBoot's stack
stack_mboot_ptr:	equ		$			; MBoot stack pointer top
stack_old_ptr:		dw		0x0000			; Store for old stack pointer
sector_buffer:		equ		$			; The rest of the memory for sector buffering
								; Actually just need 16*128=2k

END             
